COPY(select *
from tb_cliente tc)
to 'c:/temp/teste2.csv'
with
delimiter as ';'
;


copy(select *
from tb_cliente tc 
)
to 'c:/temp/teste.csv'
with
csv
quote as ';';

copy(select *
from tb_cliente tc 
)
to 'c:/temp/cliente_18_10_23.txt'
with
delimiter as ';';

create or replace function fn_tx_venda(real)
returns real AS 
$$
declare 
v_subtotal alias for $1;
begin 
	return v_subtotal * 0.06;
end
$$
language plpgsql;

select fn_tx_venda(9.87);

create or replace function fn_tx_venda(p_subtotal real)
returns real as 
$$
begin 
	return p_subtotal * 0.06;
end
$$
language plpgsql;

select fn_tx_venda(12);

create or replace function fn_variaveis(integer, varchar)
returns varchar as 
$$
begin
	return 'Variaveis de retorno:' ||$1||$2;
end
$$
language plpgsql;


select fn_variaveis(1,'-LBD');

select fn_variaveis(1,'-LBD') "Retorno da Função";


create or replace function fn_tipo_coluna(int)
returns varchar as 
$$
declare 
v_nome tb_cliente.nome%type;
begin
	select nome into v_nome
	from tb_cliente
	where id_cliente = $1;

return 'Nome do cliente:' || v_nome;
end
$$
language plpgsql;

select fn_tipo_coluna(10);

create or replace function fn_tipo_tupla(int)
returns varchar as 
$$
declare 
v_tupla tb_cliente%ROWTYPE;
begin
	select * into v_tupla 
	from tb_cliente
	where id_cliente= $1;
return 'Tupla (linha):'||v_tupla;
end
$$
language plpgsql;

select fn_tipo_tupla(10);

create or replace function fn_cliente(tb_cliente.id_cliente%type)
returns text as 
$$
declare 
v_linha record;
begin
		select * into v_linha
		from tb_cliente
		where id_cliente = $1;
	
		if not found then
		raise exception 'Cliente % não encontrado', $1;
		else
		return 'Cliente encontrado';
		end if;
	end
$$
language plpgsql;

select fn_cliente(10);

select fn_cliente(99);

create table tb_log(
nome	varchar(30),
data_hora	timestamp
);

create or replace function fn_log(p_nome varchar)
returns timestamp as 
$$
begin 
	insert into tb_log
	values(p_nome, now());
return now();
end
$$
language plpgsql;

select fn_log('Geraldo');

create or replace function fn_loop_basico()
returns void as 
$$
declare 
v_contador integer;
begin
	v_contador :=0;
	loop
		v_contador := v_contador +1;
		raise notice 'Contador eh:%', v_contador;
		exit when v_contador >= 1000;
	end loop;
	return;	
end;
$$
language plpgsql;

select fn_loop_basico();

create sequence sq_categoria;

create table tb_categoria(
id_categoria	int,
ds_categoria	varchar(40) not null,
fg_ativo	int not null,
primary key(id_categoria)
);

create or replace function fn_categoria(p_id_categoria int,
										p_descricao_categoria varchar,
										p_flag int,
										p_opcao char)
	returns int as 
$$
declare 
	v_id_categoria tb_categoria.id_categoria%type;
begin 
	if p_opcao = 'I' then
	select nextval('sq_categoria') into v_id_categoria;
	insert into tb_categoria(id_categoria,
							 ds_categproa,
							 fg_ativo)
values(v_id_categoria, p_descricao, p_flag);

return v_id_categoria;

elseif p_opcao = 'U' then
	update tb_categoria
	set ds_categoria = p_descricao
	where id_categoria = p_id_categoria;

return p_id_categoria;

elseif p_opcao = 'D' then
	delete 
	from tb_categoria
	where id_categoria = p_id_categoria;

	return 0;
else
	return -1;
end if;
exception
	when others then
	return -1;
end;
$$ language plpgsql;

select fn_categoria(null, 'CATEGORIA 1', 1, 'I');
select fn_categoria(null, 'CATEGORIA 2', 1, 'I');
select fn_categoria(null, 'CATEGORIA 3', 1, 'I');

select * from TB_CATEGORIA;

select fn_categoria(1,'CATEGORIA 1 - ALTERADA', 1,'U');
