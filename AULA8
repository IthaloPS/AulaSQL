select i.ds_item, e.quantidade
from tb_item i
join tb_estoque e on (i.id_item = e.id_item);

create view vs_status_estoque as
select i.ds_item, e.quantidade
from tb_item i
join tb_estoque e on(i.id_item = e.id_item);

select * 
from vs_status_estoque;

drop view vs_status_estoque ;

create table tb_teste_view(
col_a	serial,
col_b	varchar(10),
col_c	varchar(10),
fg_ativo	boolean,
primary key(col_a)
);

insert into tb_teste_view (col_b, col_c, fg_ativo)
values
('Desc1','Desc1',TRUE),
('Desc2','Desc2',TRUE),
('Desc3','Desc3',TRUE);

create view vw_teste as 
select * 
from tb_teste_view ;

select *
from vw_teste;

alter table tb_teste_view 
add column col_d varchar(10);

select * 
from vw_teste;

create or replace view vw_teste as
select *
from tb_teste_view ;

select *
from vw_teste;

create table "Tb_Cliente_Teste"
as 
select *
from tb_cliente;

select *
from "Tb_Cliente_Teste" ;

select quote_ident('Tb_Cliente_Teste');

create table tb_dados_duplicados(
id_cliente	int,
nm_cliente	varchar,
sobrenome	varchar,
idade	int
);

insert into tb_dados_duplicados 
values
(1,'Philip','Marlowe',38),
(2,'Richard','Hannay',42),
(3,'Holly','Martins',25),
(4,'Harry','Palmer',36),
(4,'Mark','Hall',47);

select *
from tb_dados_duplicados;

select *
from tb_dados_duplicados 
where id_cliente in(select id_cliente
					from tb_dados_duplicados
					group by id_cliente
					having count(*) > 1);
					
delete 
from tb_dados_duplicados 
where id_cliente = 4 and sobrenome ='Hall';

create table tb_novo_cliente
as
select id_cliente
from tb_dados_duplicados ;

insert into tb_novo_cliente 
values(4);

delete from tb_novo_cliente

begin;
	lock table tb_novo_cliente in row exclusive mode;
	delete from tb_novo_cliente 
	where ctid not in(select min(ctid)
				  	  from tb_novo_cliente 
				  	  where id_cliente in(1,2,3,4)
				  	  group by id_cliente);
commit;

select * from tb_novo_cliente ;

alter table tb_novo_cliente 
add constraint pk_tb_novo_cliente_id_cliente
	primary key(id_cliente);
	
alter table tb_novo_cliente 
add unique(id_cliente);

create unique index on tb_novo_cliente(id_cliente);

select *
from generate_series(1,5);

select date(generate_series(now(),
			now()+'1 week',
			'1 day'
));

select (random()* (2*10^9))::integer;

select(random()*100.)::numeric(4,2);

select repeat('1',(random()*40)::integer);

select substr('abcdefghijklmnopqrstuvwxyz',1,
			  (random()*26)::integer);

select (array['um','dois','tres'])[1+random()*3];

select generate_series(1,10) as chave,
	(random()* 100.)::numeric(4,2),
	repeat('1',(random()*25)::integer);
	
select generate_series(1,10) as chave,
	(random()* 100.)::numeric(4,2),
	repeat('1',(random()*25)::integer)
order by random()*3;

create table tb_exemplo
as 
select *
from tb_cliente 
where id_cliente is null;

select *
from tb_cliente;

copy tb_exemplo
from 'C:/temp/tb_cliente_202310182125.csv'
	using delimiters ','
	csv header;
	
select *
from tb_exemplo ;

create table tb_xml(
id	serial,
documento_xml	xml,
constraint pk_xml_id primary key(id));

insert into tb_xml(documento_xml)
select xmlforest(nome, endereco, cidade)
from tb_cliente ;

select * from tb_xml;

copy (select documento_xml
	  from tb_xml)
to'c:/temp/xml_teste.xml';

create table tb_produtos(
id_produto	int not null primary key,
produto_codigo	varchar(20),
produto_nome	varchar(60),
produto_valor	real,
produto_situacao	varchar(1) default'A',
data_criacao	timestamp,
data_atuacao	timestamp
);

alter table tb_produtos 
add column produto_categoria text[];

alter table tb_produtos 
add column produto_estoque json;

insert into tb_produtos
values
(99,'6234','COCA-COLA',6,'A','01/01/2023','01/01/2023',
'{"REFRIGERANTE","LATA","BEBIDA","COLA"}',
'{"info_estoque":
	{"tem_estoque":"SIM",
	 "quantidade":17,
	 "ultima_compra":"01/01/23"
}'
);
